СТРУКТУРА ПРОЕКТА:
=================
├── .env
├── __init__.py
├── api/
│   ├── __init__.py
│   ├── wb_account_routes.py
│   └── wb_card_routes.py
├── app.py
├── config.py
├── controllers/
│   ├── wb_account_controller.py
│   └── wb_card_controller.py
├── data/
│   ├── __init__.py
│   ├── database.py
│   ├── models.py
│   ├── repositories.py
│   └── wb_api.py
├── project_analysis.txt
├── project_analyzer.py
├── pyproject.toml
├── services/
│   ├── wb_account_service.py
│   └── wb_card_service.py
├── utils/
│   ├── __init__.py
│   └── logger.py
└── uv.lock

================================================================================
СОДЕРЖИМОЕ .py ФАЙЛОВ:
================================================================================


============================================================
ФАЙЛ: config.py
============================================================

import os
from dotenv import load_dotenv

load_dotenv()


class Config:
    SQLALCHEMY_DATABASE_URI = os.getenv(
        "DATABASE_URL", "postgresql://postgres:@localhost/reflow"
    )
    WB_API_KEY = os.getenv("WB_API_KEY")
    WB_API_CONTENT_URL = "https://content-api-sandbox.wildberries.ru/content/v2"
    WB_API_CONTENT_PING_URL = "https://content-api-sandbox.wildberries.ru/ping"

    LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
    LOG_FILE = os.getenv("LOG_FILE", "logs/wb_api_manager.log")


config = Config()

============================================================
ФАЙЛ: __init__.py
============================================================



============================================================
ФАЙЛ: app.py
============================================================

from flask import Flask

from api.wb_account_routes import init_wb_account_routes
from api.wb_card_routes import init_wb_card_routes
from config import Config
from controllers.wb_account_controller import WbAccountController
from controllers.wb_card_controller import WbCardController
from data.database import init_db, db
from data.repositories import WbAccountsRepository, WbCardRepository
from data.wb_api import WbApi
from services.wb_account_service import WbAccountService
from services.wb_card_service import WBCardService


def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)
    init_db(app)

    wb_api = WbApi(api_key=app.config.get("WB_API_KEY"))

    wb_account_repository = WbAccountsRepository(db)
    wb_account_service = WbAccountService(wb_api, wb_account_repository)
    wb_account_controller = WbAccountController(wb_account_service)
    app.register_blueprint(init_wb_account_routes(wb_account_controller))

    wb_card_repository = WbCardRepository(db)
    wb_card_service = WBCardService(wb_api, wb_card_repository)
    wb_card_controller = WbCardController(wb_card_service)
    app.register_blueprint(init_wb_card_routes(wb_card_controller))

    return app


if __name__ == "__main__":
    app = create_app()
    app.run()

============================================================
ФАЙЛ: utils/__init__.py
============================================================



============================================================
ФАЙЛ: utils/logger.py
============================================================

# utils/logger.py
import logging


def get_logger(name):
    logger = logging.getLogger(name)
    if not logger.hasHandlers():
        formatter = logging.Formatter(
            "[%(asctime)s] %(levelname)s in %(name)s: %(message)s"
        )
        handler = logging.StreamHandler()
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
    return logger

============================================================
ФАЙЛ: api/__init__.py
============================================================



============================================================
ФАЙЛ: api/wb_account_routes.py
============================================================

from flask import Blueprint
from controllers.wb_account_controller import WbAccountController

bp = Blueprint("wb_account", __name__, url_prefix="/api/wb/accounts")


def init_wb_account_routes(controller: WbAccountController):
    @bp.route("/<int:account_id>", methods=["GET"])
    def get_account(account_id):
        return controller.get_account_by_id(account_id)

    @bp.route("/api-key", methods=["PUT"])
    def update_api_key():
        return controller.update_account_api_key()

    return bp

============================================================
ФАЙЛ: api/wb_card_routes.py
============================================================

from flask import Blueprint
from controllers.wb_card_controller import WbCardController

bp = Blueprint("wb_cards", __name__, url_prefix="/api/wb/cards")


def init_wb_card_routes(controller: WbCardController):
    @bp.route("/", methods=["GET"])
    def add_card_list():
        return controller.add_card_list()

    return bp

============================================================
ФАЙЛ: controllers/wb_account_controller.py
============================================================

from flask import jsonify, request
from services.wb_account_service import WbAccountService


class WbAccountController:
    def __init__(self, service: WbAccountService):
        self.service = service

    def get_account_by_id(self, account_id: int):
        account = self.service.get_account_by_id(account_id)
        if account:
            return jsonify(
                {"id": account.id, "api_key": account.api_key, "name": account.name}
            )
        return jsonify({"error": "Account not found"}), 404

    def update_account_api_key(self):
        data = request.get_json()
        if "api_key" not in data:
            return jsonify({"error": "API key is required"}), 400

        api_key = data["api_key"]
        try:
            is_valid = self.service.update_api_key(api_key)
            if not is_valid:
                return jsonify({"error": "API key validation failed"}), 400
            return jsonify({"message": "API key updated successfully"})
        except Exception as e:
            return jsonify({"error": str(e)}), 500

============================================================
ФАЙЛ: controllers/wb_card_controller.py
============================================================

from flask import jsonify, request
from services.wb_card_service import WBCardService
from utils.logger import get_logger

logger = get_logger(__name__)


class WbCardController:
    def __init__(self, service: WBCardService):
        self.service = service

    def add_card_list(self):
        card_list = self.service.add_card_list()
        if card_list is None:
            return jsonify({"error": "Something went wrong"}), 404
        logger.info(f"card_list: {card_list}")
        return jsonify({"message": "ok"})

============================================================
ФАЙЛ: data/models.py
============================================================

from datetime import datetime
from typing import Optional, List

from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.orm import relationship

from data.database import db


class WbAccount(db.Model):
    __tablename__ = "wb_accounts"
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(String(100))
    company_name: Mapped[str] = mapped_column(String(100))
    api_key: Mapped[str] = mapped_column(String(511), unique=True)
    is_active: Mapped[bool] = mapped_column()
    created_at: Mapped[datetime] = mapped_column(server_default="CURRENT_TIMESTAMP")
    last_sync: Mapped[Optional[datetime]] = mapped_column()

    def __repr__(self) -> str:
        return f"WBAccount(id={self.id!r}, account_name={self.name!r}, is_active={self.is_active!r})"


class WbCard(db.Model):
    __tablename__ = "wb_cards"
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    nm_id: Mapped[int] = mapped_column(unique=True, index=True)
    title: Mapped[str] = mapped_column(String(255))
    description: Mapped[str] = mapped_column(String(255))
    photos: Mapped[List["WbPhotos"]] = relationship(back_populates="card")


class WbPhotos(db.Model):
    __tablename__ = "wb_photos"
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)

    big: Mapped[str] = mapped_column(String(1000))
    c246x328: Mapped[str] = mapped_column(String(1000))
    c516x688: Mapped[str] = mapped_column(String(1000))
    square: Mapped[str] = mapped_column(String(1000))
    tm: Mapped[str] = mapped_column(String(1000))

    card_id: Mapped[int] = mapped_column(ForeignKey("wb_cards.id"))
    card: Mapped["WbCard"] = relationship(back_populates="photos")

============================================================
ФАЙЛ: data/database.py
============================================================

from sqlalchemy.orm import DeclarativeBase

from flask_sqlalchemy import SQLAlchemy


class Base(DeclarativeBase):
    pass


db = SQLAlchemy(model_class=Base)


def init_db(app):
    db.init_app(app)
    with app.app_context():
        db.create_all()

============================================================
ФАЙЛ: data/__init__.py
============================================================



============================================================
ФАЙЛ: data/wb_api.py
============================================================

import requests
from utils.logger import get_logger

logger = get_logger(__name__)


class WbApi:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://content-api-sandbox.wildberries.ru"
        self.content_url = f"{self.base_url}/content/v2"
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
        }

    def validate_api_key(self) -> bool:
        try:
            ping_url = f"{self.base_url}/ping"
            response = requests.get(ping_url, headers=self.headers)
            logger.info(f"ping_url: {ping_url}, headers: {self.headers}")
            response.raise_for_status()
            return True
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 401:
                return False
            elif e.response.status_code == 429:
                raise WBAPIError("Too many requests - rate limit exceeded") from e
            else:
                raise WBAPIError(f"API error: {e.response.status_code}") from e

        except requests.exceptions.RequestException:
            raise

    def get_card_list(self):
        try:
            card_list_url = f"{self.content_url}/get/cards/list"
            payload = {
                "settings": {"cursor": {"limit": 100}, "filter": {"withPhoto": -1}}
            }

            response = requests.post(card_list_url, headers=self.headers, json=payload)
            response.raise_for_status()
            logger.debug(f"response status code: {response.status_code}")

            card_list = response.json()
            return card_list
        except requests.exceptions.HTTPError as e:
            status_code = e.response.status_code
            if status_code == 401:
                raise WBAPIError("Unathorized") from e
            elif status_code == 429:
                raise WBAPIError("Too many requests - rate limit exceeded") from e
            elif 400 <= status_code < 500:
                raise WBAPIError(
                    f"Client error {status_code}: {e.response.text}"
                ) from e
            elif 500 <= status_code < 600:
                raise WBAPIError(f"Server error {status_code}") from e
            return None


class WBAPIError(Exception):
    pass

============================================================
ФАЙЛ: data/repositories.py
============================================================

from data.models import WbAccount, WbCard, WbPhotos
from utils.logger import get_logger

logger = get_logger(__name__)


class WbAccountsRepository:
    def __init__(self, db):
        self.db = db

    def get_wb_account_by_id(self, account_id: int) -> WbAccount | None:
        user = self.db.session.execute(
            self.db.select(WbAccount).where(WbAccount.id == account_id)
        ).scalar_one_or_none()
        logger.info(f"got user: {user.__repr__()}")
        return user

    def update_api_key(self, account_id: int, api_key: str) -> None:
        user = self.get_wb_account_by_id(account_id)
        if user:
            user.api_key = api_key
            self.db.session.commit()


class WbCardRepository:
    def __init__(self, db):
        self.db = db

    def add_wb_card(self, wb_card_data, photos_data):
        wb_card = WbCard(
            nm_id=wb_card_data.nm_id,
            title=wb_card_data.title,
            description=wb_card_data.description,
        )
        self.db.session.add(wb_card)
        self.db.session.commit()
        photos = WbPhotos(
            big=photos_data.big,
            c246x328=photos_data.c246x328,
            c516x688=photos_data.c516x688,
            square=photos_data.square,
            tm=photos_data.tm,
            card_id=wb_card.id,
        )
        self.db.session.add(photos)
        self.db.session.commit()

============================================================
ФАЙЛ: services/wb_card_service.py
============================================================

from ctypes import c_char
from dataclasses import dataclass
from typing import Optional, List

from data.repositories import WbCardRepository
from data.wb_api import WbApi
from utils.logger import get_logger
import json

logger = get_logger(__name__)


@dataclass
class PhotoData:
    big: str
    c246x328: str
    c516x688: str
    square: str
    tm: str


@dataclass
class CardData:
    title: str
    description: str
    nm_id: int


class WBCardService:
    def __init__(self, wb_api: WbApi, wb_card_repository: WbCardRepository):
        self.wb_api = wb_api
        self.wb_card_repository = wb_card_repository

    def add_card_list(self):
        card_list = self.wb_api.get_card_list()
        # logger.info(f"card_list: {card_list}")
        # Добавить карточки в бд
        for card in card_list["cards"]:
            photos_data = [PhotoData(**photo) for photo in card["photos"]]

            card_data = CardData(
                title=card["title"],
                description=card["description"],
                nm_id=card["nmID"],
            )
            logger.info(f"card_data: {card_data}")
            # self.wb_card_repository.add_wb_card(card_data, photos_data)
        return card_list

    # def get_card_list(self):

============================================================
ФАЙЛ: services/wb_account_service.py
============================================================

from data.wb_api import WbApi
from data.repositories import WbAccountsRepository
from utils.logger import get_logger

logger = get_logger(__name__)


class WbAccountService:
    def __init__(self, wb_api: WbApi, wb_account_repository: WbAccountsRepository):
        self.wb_api = wb_api
        self.wb_account_repository = wb_account_repository

    def get_account_by_id(self, account_id: int):
        return self.wb_account_repository.get_wb_account_by_id(account_id)

    def update_api_key(self, api_key: str) -> bool:
        logger.info(f"Updating API key for account, api_key: {api_key}")
        is_valid = self.wb_api.validate_api_key()
        logger.info(f"is_valid: {is_valid}")
        if is_valid:
            # Достаём account_id из нашей сессии в браузере (пока что заглушка id=1)
            account_id = 1
            self.wb_account_repository.update_api_key(account_id, api_key)

        return is_valid
