import os
import argparse
from pathlib import Path


def get_project_structure(root_dir, prefix="", ignore_dirs=None):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    if ignore_dirs is None:
        ignore_dirs = {
            ".git",
            "__pycache__",
            ".vscode",
            ".idea",
            ".venv",
            ".ruff_cache",
            "env",
            "node_modules",
        }

    structure = []
    try:
        items = sorted(
            [item for item in os.listdir(root_dir) if item not in ignore_dirs]
        )
    except PermissionError:
        return []

    for i, item in enumerate(items):
        item_path = os.path.join(root_dir, item)
        is_last = i == len(items) - 1

        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "

        if os.path.isdir(item_path):
            structure.append(prefix + connector + item + "/")
            extension = "    " if is_last else "‚îÇ   "
            structure.extend(
                get_project_structure(item_path, prefix + extension, ignore_dirs)
            )
        else:
            structure.append(prefix + connector + item)

    return structure


def extract_py_files_content(root_dir, output_file):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–æ–≤"""
    with open(output_file, "w", encoding="utf-8") as outfile:
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        outfile.write("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:\n")
        outfile.write("=================\n")
        structure = get_project_structure(root_dir)
        for line in structure:
            outfile.write(line + "\n")

        outfile.write("\n" + "=" * 80 + "\n")
        outfile.write("–°–û–î–ï–†–ñ–ò–ú–û–ï .py –§–ê–ô–õ–û–í:\n")
        outfile.write("=" * 80 + "\n\n")

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .py —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(root_dir):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏ –∏ —Å–∞–º —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
            dirs[:] = [
                d
                for d in dirs
                if d
                not in {
                    ".git",
                    "__pycache__",
                    ".vscode",
                    ".idea",
                    ".venv",
                    "env",
                    "node_modules",
                }
            ]

            for file in files:
                if file.endswith(".py") and file != os.path.basename(__file__):
                    file_path = os.path.join(root, file)
                    relative_path = os.path.relpath(file_path, root_dir)

                    try:
                        with open(file_path, "r", encoding="utf-8") as infile:
                            content = infile.read()

                        outfile.write(f"\n{'=' * 60}\n")
                        outfile.write(f"–§–ê–ô–õ: {relative_path}\n")
                        outfile.write(f"{'=' * 60}\n\n")
                        outfile.write(content)

                        if not content.endswith("\n"):
                            outfile.write("\n")

                    except Exception as e:
                        outfile.write(
                            f"\n–û–®–ò–ë–ö–ê –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {relative_path}: {str(e)}\n"
                        )

    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")


def main():
    parser = argparse.ArgumentParser(
        description="–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ .py —Ñ–∞–π–ª–æ–≤"
    )
    parser.add_argument(
        "--root", "-r", default=".", help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
    )
    parser.add_argument(
        "--output",
        "-o",
        default="project_analysis.txt",
        help="–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: project_analysis.txt)",
    )

    args = parser.parse_args()

    root_dir = os.path.abspath(args.root)

    if not os.path.exists(root_dir):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{root_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: {root_dir}")
    extract_py_files_content(root_dir, args.output)


if __name__ == "__main__":
    main()
